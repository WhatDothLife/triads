* Deprecated
** TODO
*** TODO Remove open files when crashing
*** TODO Use &str, &[T] or &T to allow for more generic code.
*** TODO Implement finding Core of Graph

** Code
#+begin_src rustic
struct AlgorithmRegistry;

impl AlgorithmRegistry {
    fn get<V0, V1>(algo: &str) -> Result<Box<dyn LocalConsistency<V0, V1>>, OptionsError>
    where
        V0: VertexID + 'static + Debug,
        V1: VertexID + 'static + Debug,
    {
        match algo {
            "ac1" => Ok(Box::new(ac_1_lists)),
            "ac3" => Ok(Box::new(ac_3_lists)),
            "sac1" => Ok(Box::new(sac_1_lists)),
            // "pc2" => Ok(Box::new(pc2)),
            &_ => Err(OptionsError::AlgorithmNotFound),
        }
    }
}


// TODO So far this assumes that the vertices of the dot are in list format, e.g. [1, 2] -> [2, 3]
/// Parses a graph from dot format into an `AdjacencyList`.
pub fn from_dot(dot: &str) -> AdjacencyList<Vec<u32>> {
    let mut list = AdjacencyList::<Vec<u32>>::new();
    let mut split_vec = dot.split_terminator('\n').collect::<Vec<_>>();
    split_vec.pop();
    split_vec.remove(0);
    let edges = split_vec
        .iter()
        .map(|x| x.split(&['[', ',', ' ', ']'][..]).collect::<Vec<_>>())
        .collect::<Vec<_>>();
    for vec in edges {
        let v1 = vec![
            vec[1].parse::<u32>().unwrap(),
            vec[3].parse::<u32>().unwrap(),
        ];
        let v2 = vec![
            vec[7].parse::<u32>().unwrap(),
            vec[9].parse::<u32>().unwrap(),
        ];
        list.add_vertex(v1.clone());
        list.add_vertex(v2.clone());
        list.add_edge(&v1, &v2);
    }

    list
}

/// Returns `true` if `g` is a core, and `false` otherwise.  A graph G is
/// called a core if every endomorphism of G is an automorphism.
///
/// # Examples
/// ```
/// let triad = Triad::from_strs("1000", "11", "0");
///
/// asserteq!(true, is_core(&triad));
/// ```
pub fn is_core<'a, V, T>(g: &'a T) -> bool
where
    &'a T: Into<AdjacencyList<V>>,
    V: Eq + Hash + Clone,
{
    for (_, v) in ac3(&g.into(), &g.into()).unwrap() {
        if v.size() != 1 {
            return false;
        }
    }
    true
}

/// Tries to find a mapping from `g0` to `g1` that is locally consistent.
/// The type of local consistency is determined by the algorithm `algo`.
///
/// **NOTE:** This function assumes that algorithm `algo` solves the CSP.
///
/// Returns None, if an empty list is derived for some vertex v, otherwise
/// singleton-arc-consistent lists are returned.
pub fn find_precolour<V0, V1, A>(
    g0: &AdjacencyList<V0>,
    g1: &AdjacencyList<V1>,
    lists: Lists<V0, V1>,
    algo: &A,
) -> Option<Lists<V0, V1>>
where
    V0: VertexID + Debug,
    V1: VertexID,
    A: LocalConsistency<V0, V1>,
{
    println!("Start");
    let mut lists = algo(g0, g1, lists)?;
    println!("End");

    for v0 in g0.vertices() {
        println!("{:?}", v0);
        let list_v0 = lists.get(&v0).unwrap();
        if list_v0.size() > 1 {
            let mut found = false;

            for v1 in list_v0.clone().iter() {
                let mut lists_sac = lists.clone();
                lists_sac.insert(v0.clone(), list![v1.clone()]);

                if let Some(lists_res) = algo(g0, g1, lists_sac) {
                    lists = lists_res;
                    found = true;
                    break;
                }
            }
            if !found {
                return None;
            }
        }
    }
    Some(lists)
}


impl<T, U> Mul<&AdjacencyList<U>> for &AdjacencyList<T>
where
    T: Eq + Hash + Clone,
    U: Eq + Hash + Clone,
{
    type Output = AdjacencyList<(T, U)>;

    fn mul(self, rhs: &AdjacencyList<U>) -> AdjacencyList<(T, U)> {
        let mut list = AdjacencyList::new();

        for v1 in self.vertex_iter().cloned() {
            for v2 in rhs.vertex_iter().cloned() {
                list.insert_vertex((v1.clone(), v2));
            }
        }

        for (x1, y1) in self.edge_vec().iter() {
            for (x2, y2) in rhs.edge_vec().iter() {
                list.insert_edge(&(x1.clone(), x2.clone()), &(y1.clone(), y2.clone()));
            }
        }

        list
    }
}

impl<T: Eq + Hash + Clone + FromStr> AdjacencyList<T> {
    pub fn from_edge_list(list: &str) -> Result<AdjacencyList<T>, <T as FromStr>::Err> {
        let tree = list
            .split(&[',', '[', ']', ' '][..])
            .filter(|&x| !x.is_empty())
            .collect::<Vec<_>>();

        let mut list = AdjacencyList::<T>::new();
        for (i, _) in tree.iter().enumerate().step_by(2) {
            let v1 = tree[i].parse::<T>()?;
            let v2 = tree[i + 1].parse::<T>()?;

            list.insert_vertex(v1.clone());
            list.insert_vertex(v2.clone());
            list.insert_edge(&v1, &v2);
        }
        Ok(list)
    }
}

/// Performs a backtracking-search to find a mapping from `g0` to `g1` that is
/// locally consistent. The type of local consistency is determined by the
/// algorithm `algo`.
pub fn search_precolour_recursive<V0, V1, A>(
    g0: &AdjacencyList<V0>,
    g1: &AdjacencyList<V1>,
    lists: Lists<V0, V1>,
) -> Option<Lists<V0, V1>>
where
    V0: VertexID + Debug,
    V1: VertexID + Debug,
    A: LocalConsistency<V0, V1>,
{
    let lists = ac3_precolour(g0, g1, lists)?;
    let mut sorted_list = lists.clone().into_iter().collect::<Vec<_>>();
    sorted_list.sort_by(|(_, l0), (_, l1)| l1.size().cmp(&l0.size()));
    let vertex_list = sorted_list.iter().map(|(a, _)| a).collect::<Vec<_>>();
    search_rec(g0, g1, lists, vertex_list)
}

/// Recursive helper function.
fn search_rec<V0, V1>(
    g0: &AdjacencyList<V0>,
    g1: &AdjacencyList<V1>,
    f: Lists<V0, V1>,
    mut vertex_list: Vec<&V0>,
) -> Option<Lists<V0, V1>>
where
    V0: VertexID + Debug,
    V1: VertexID + Debug,
{
    let v0 = if let Some(v0) = vertex_list.pop() {
        v0
    } else {
        return Some(f);
    };
    let l = f.get(&v0).unwrap();
    println!("v0 = {:?}", v0);
    println!("l = {:?}", l);

    for v1 in l.iter() {
        println!("\t v1 = {:?}", v1);
        let list = list![v1.clone()];

        let mut map = f.clone();
        *map.get_mut(&v0).unwrap() = list;

        if let Some(res) = ac3_precolour(g0, g1, map) {
            map = res;
            if let Some(res) = search_rec(g0, g1, map, vertex_list.clone()) {
                return Some(res);
            }
        }
    }
    None
}
#+end_src

* TODO
** TODO Idempotence
Do all the above, but restrict to idempotent polymorphisms. In this case, we no longer
restrict our attention to core triads, but consider all triads on a given number of vertices.

** TODO Write tests
** TODO Generate all triads without constraint
** TODO Use with capacity

* Results
** Misc
- Falls CSP(T) in NP => AC 1. Durchlauf Lösung bei Suche nach 3wnu
- Falls CSP(T) in P => AC = SAC?
- Falls CSP(T) in P => löst AC das CSP(T)?
